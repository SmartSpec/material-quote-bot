import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calculator, Download } from "lucide-react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const QuoteForm = () => {
  const [quantity, setQuantity] = useState("1");
  const [material, setMaterial] = useState("");
  const [process, setProcess] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedQuote, setGeneratedQuote] = useState<any>(null);
  
  // Manual input overrides
  const [shape, setShape] = useState("");
  const [diameter, setDiameter] = useState("");
  const [height, setHeight] = useState("");
  const [thickness, setThickness] = useState("");

  const handleGenerateQuote = async () => {
    if (!material || !process) {
      toast.error("Please select material and process type");
      return;
    }

    setIsGenerating(true);

    try {
      const { data: { user } } = await supabase.auth.getUser();

      if (!user) {
        toast.error("Please sign in to generate quotes");
        return;
      }

      // Get the most recent CAD upload with analysis
      const { data: uploads } = await supabase
        .from('cad_uploads')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(1);

      const latestUpload = uploads?.[0];

      const { data, error } = await supabase.functions.invoke('generate-quote', {
        body: {
          quantity: parseInt(quantity),
          material,
          process,
          cadUploadId: latestUpload?.id || null,
          estimatedVolume: latestUpload?.estimated_volume || null,
        },
      });

      if (error) throw error;

      setGeneratedQuote(data);
      toast.success("Quote generated successfully!");
    } catch (error: any) {
      toast.error(error.message || "Failed to generate quote");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadPDF = () => {
    if (!generatedQuote) return;

    const doc = new jsPDF();
    
    // Add company branding
    doc.setFontSize(24);
    doc.setTextColor(0, 150, 136); // Teal color
    doc.text("SmartSpec", 20, 20);
    
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text("Let your CAD drawings speak for themselves", 20, 28);
    
    // Add quote title
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text("Fabrication Quote", 20, 45);
    
    // Add quote details
    doc.setFontSize(10);
    doc.text(`Quote ID: ${generatedQuote.id || 'N/A'}`, 20, 55);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 62);
    doc.text(`Valid Until: ${new Date(generatedQuote.valid_until).toLocaleDateString()}`, 20, 69);
    
    // Add specifications
    doc.setFontSize(12);
    doc.text("Specifications", 20, 85);
    
    autoTable(doc, {
      startY: 90,
      head: [['Item', 'Value']],
      body: [
        ['Quantity', quantity],
        ['Material', material.charAt(0).toUpperCase() + material.slice(1)],
        ['Process', process.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')],
        ...(generatedQuote.volume ? [['Part Volume', `${generatedQuote.volume.toFixed(2)} mmÂ³`]] : []),
      ],
      theme: 'striped',
      headStyles: { fillColor: [0, 150, 136] },
    });
    
    // Add price breakdown
    const finalY = (doc as any).lastAutoTable.finalY + 10;
    doc.setFontSize(12);
    doc.text("Price Breakdown", 20, finalY);
    
    autoTable(doc, {
      startY: finalY + 5,
      head: [['Description', 'Amount']],
      body: [
        ['Material Cost', `$${generatedQuote.material_cost.toFixed(2)}`],
        ['Fabrication Cost', `$${generatedQuote.fabrication_cost.toFixed(2)}`],
        ['Overhead & Risk', `$${generatedQuote.overhead_cost.toFixed(2)}`],
      ],
      foot: [['Total', `$${generatedQuote.total_price.toFixed(2)}`]],
      theme: 'striped',
      headStyles: { fillColor: [0, 150, 136] },
      footStyles: { fillColor: [0, 150, 136], fontStyle: 'bold' },
    });
    
    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text("Generated by SmartSpec - smartspec.solutions", 20, pageHeight - 10);
    
    // Save the PDF
    doc.save(`quote-${new Date().toISOString().split('T')[0]}.pdf`);
    toast.success("PDF downloaded successfully!");
  };

  return (
    <Card className="shadow-card hover:shadow-elegant transition-shadow duration-300">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Calculator className="w-5 h-5 text-primary" />
          Quote Configuration
        </CardTitle>
        <CardDescription>
          Configure your part specifications for accurate pricing
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-2">
          <Label htmlFor="quantity">Quantity</Label>
          <Input
            id="quantity"
            type="number"
            min="1"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            placeholder="Enter quantity"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="material">Material Type</Label>
          <Select value={material} onValueChange={setMaterial}>
            <SelectTrigger>
              <SelectValue placeholder="Select material" />
            </SelectTrigger>
            <SelectContent className="bg-card z-50">
              <SelectItem value="steel">Steel</SelectItem>
              <SelectItem value="aluminum">Aluminum</SelectItem>
              <SelectItem value="copper">Copper</SelectItem>
              <SelectItem value="stainless">Stainless Steel</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="process">Fabrication Process</Label>
          <Select value={process} onValueChange={setProcess}>
            <SelectTrigger>
              <SelectValue placeholder="Select process" />
            </SelectTrigger>
            <SelectContent className="bg-card z-50">
              <SelectItem value="laser-cutting">Laser Cutting</SelectItem>
              <SelectItem value="cnc-machining">CNC Machining</SelectItem>
              <SelectItem value="sheet-metal">Sheet Metal</SelectItem>
              <SelectItem value="welding">Welding</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Manual Input Section */}
        <div className="pt-6 border-t border-border">
          <h4 className="text-sm font-semibold mb-4 text-muted-foreground">Manual Inputs (Override PDF Data)</h4>
          
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="shape">Shape</Label>
              <Select value={shape} onValueChange={setShape}>
                <SelectTrigger>
                  <SelectValue placeholder="Select shape" />
                </SelectTrigger>
                <SelectContent className="bg-card z-50">
                  <SelectItem value="rectangle">Rectangle</SelectItem>
                  <SelectItem value="square">Square</SelectItem>
                  <SelectItem value="circle">Circle</SelectItem>
                  <SelectItem value="tube">Tube/Pipe</SelectItem>
                  <SelectItem value="angle">Angle/L-Shape</SelectItem>
                  <SelectItem value="channel">Channel/U-Shape</SelectItem>
                  <SelectItem value="i-beam">I-Beam</SelectItem>
                  <SelectItem value="custom">Custom</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="grid grid-cols-3 gap-3">
              <div className="space-y-2">
                <Label htmlFor="diameter" className="text-xs">Diameter (mm)</Label>
                <Input
                  id="diameter"
                  type="number"
                  min="0"
                  step="0.1"
                  value={diameter}
                  onChange={(e) => setDiameter(e.target.value)}
                  placeholder="0.0"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="height" className="text-xs">Height (mm)</Label>
                <Input
                  id="height"
                  type="number"
                  min="0"
                  step="0.1"
                  value={height}
                  onChange={(e) => setHeight(e.target.value)}
                  placeholder="0.0"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="thickness" className="text-xs">Thickness of Material (mm)</Label>
                <Input
                  id="thickness"
                  type="number"
                  min="0"
                  step="0.1"
                  value={thickness}
                  onChange={(e) => setThickness(e.target.value)}
                  placeholder="0.0"
                />
              </div>
            </div>

            {(shape || diameter || height || thickness) && (
              <div className="p-3 rounded-md bg-accent/10 border border-accent/20">
                <p className="text-xs text-muted-foreground">
                  <span className="font-semibold text-accent">Note:</span> Manual inputs will override any dimensions parsed from PDF files.
                </p>
              </div>
            )}
          </div>
        </div>

        <div className="pt-4 space-y-3">
          <Button 
            className="w-full" 
            size="lg"
            onClick={handleGenerateQuote}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                <div className="w-4 h-4 mr-2 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin" />
                Generating Quote...
              </>
            ) : (
              <>
                <Calculator className="w-4 h-4 mr-2" />
                Generate Quote
              </>
            )}
          </Button>
          
          <Button 
            variant="outline" 
            className="w-full"
            disabled={!generatedQuote}
            onClick={handleDownloadPDF}
          >
            <Download className="w-4 h-4 mr-2" />
            Download PDF
          </Button>
        </div>

        {generatedQuote && (
          <div className="p-4 rounded-lg bg-primary/5 border border-primary/20">
            <h4 className="font-semibold mb-3">Estimated Price Breakdown</h4>
            <div className="space-y-2 text-sm">
              {generatedQuote.volume && (
                <div className="flex justify-between pb-2 border-b border-primary/10">
                  <span className="text-muted-foreground">Part Volume:</span>
                  <span className="font-medium">{generatedQuote.volume.toFixed(2)} mmÂ³</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-muted-foreground">Material Cost:</span>
                <span className="font-medium">${generatedQuote.material_cost.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Fabrication:</span>
                <span className="font-medium">${generatedQuote.fabrication_cost.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Overhead & Risk:</span>
                <span className="font-medium">${generatedQuote.overhead_cost.toFixed(2)}</span>
              </div>
              <div className="pt-2 border-t border-primary/20 flex justify-between text-base">
                <span className="font-semibold">Total:</span>
                <span className="font-bold text-primary">${generatedQuote.total_price.toFixed(2)}</span>
              </div>
              <div className="text-xs text-muted-foreground mt-2">
                Valid until: {new Date(generatedQuote.valid_until).toLocaleDateString()}
              </div>
              {generatedQuote.cad_upload_id && (
                <div className="text-xs text-success mt-2">
                  â Quote based on CAD analysis
                </div>
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default QuoteForm;
